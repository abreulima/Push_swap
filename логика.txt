1 3 5 7 8
0 1 2 3 4

8 1 3 5 7
4 0 1 2 3

stack[4] = stack[3]
stack[4] = 7

команды:
___________________
2 1 3 6 5 8

pa/pb: 
2 3 6 5 8 | 1 - перемещает верхний элемент в другой стэк
sa/sb/ss:
1 2 3 6 5 8 - перемещает первые два символа
ra/rb/rr:
1 3 6 5 8 2 - перемещает верхний элемент вниз, поднимает на 1 остальные
rra/rrb/rrr:
8 2 1 3 6 5 - перемещает нижний элемент наверх, опускает на 1 остальные

программа:
__________________
должна просчитывать и выводить наименьший список команд,
необходимых для сортировки стека




итак, осталось 3 дня до дедлайна, а это значит, что пора уже
доделать проект пуш свап и получить 3 урововень!

смысл пуш свапа в том, что необходимо разработать алгоритм,
просчитывающий и выводящий наименьший список команд для
сортировки массива. 

пока что реализовала только команды, их есть 4 вида:
перемещение двух символов, перемещение по стеку вверх,
так же вниз и перемещение в другой стек.

вот, например, команда пуш б переместит верхний элемент 
-двоечку- в наш пустой стек б. вот, теперь 2 здесь.

своп меняет местами два верхних символа, как например вот
1 и 2 поменялись местами. и так далее

теперь осталось самое сложное - написать алгоритм,
который будет сам просчитывать оптимальный порядок команд
для быстрой сортировки. а за окошком снежок



Сортировка:
_______________
LSD - для чисел (выравнивание в сторону по младшему разряду, направо, к единицам.
Например: 1, 2, 9, 10, 21, 100, 200, 201, 202, 210. То есть, здесь значения сначала сортируются по
единицам, затем сортируются по десяткам, сохраняя отсортированность по единицам внутри десятков,
затем по сотням, сохраняя отсортированность по десяткам и единицам внутри сотен, и т. п.

MSD - для букв (с выравниванием в сторону старшего разряда, налево), получается алфавитный порядок,
который уместен для сортировки строк текста. Например «b, c, d, e, f, g, h, i, j, ba» отсортируется
как «b, ba, c, d, e, f, g, h, i, j». Если MSD применить к числам, приведённым в примере получим
последовательность 1, 10, 100, 2, 200, 201, 202, 21, 210, 9.


2 1 3 5 7 8
0 1 2 3 4 5

2 > 1 	1
1 > 3 	1
3 > 5	3
5 > 7	5
7 > 8	7



2 1 3 5 7 8
0 1 2 3 4 5




























